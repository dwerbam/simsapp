# This is a basic workflow to help you get started with Actions.
# It's named "Android CI" and will appear in the "Actions" tab of your GitHub repository.

name: Android CI

# This section defines when the workflow will run.
# It triggers on every 'push' to the 'main' branch and on any 'pull_request' targeting the 'main' branch.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build".
  build:
    # The type of runner that the job will run on. For Android, ubuntu-latest is a great choice.
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Checks out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Sets up the Java Development Kit (JDK) required for Android builds.
      # Gradle 8+ requires JDK 17. Use 11 for older versions.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # A popular, open-source distribution of Java

      # Step 3: Set up Gradle caching.
      # This step caches Gradle dependencies and build outputs to speed up subsequent builds.
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # Step 4: Make the gradlew script executable.
      # This is necessary because file permissions are not always preserved in git.
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Step 5: Build the project.
      # This command runs the 'build' task, which compiles the code, runs tests, and assembles the app.
      # The output (APK/AAB) will be located in the app/build/outputs/ directory in the runner's workspace.
      - name: Build with Gradle
        run: ./gradlew build

      # --- Optional but Recommended: Upload build artifacts ---
      # This step uploads the generated APK from the build, which you can download from the workflow summary page.
      # This is useful for testing or distribution.
      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk # The name of the artifact to be uploaded
          path: app/build/outputs/apk/debug/app-debug.apk
